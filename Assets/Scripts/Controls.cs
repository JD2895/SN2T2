//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""7ce2624f-fe40-4292-81e3-ec0b2bf2b595"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""c1cb7550-c822-4bc0-929c-8aa4c50e5035"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""7cfe9190-847b-486e-9db5-9444e34f3ceb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3d82eafe-6a50-401e-bfd2-2c32c1510b2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""deb6161b-afe1-4b76-9c14-0c3bc3663fb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d26fb60c-3e7d-4a18-b0d3-0e922f773d26"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""195834da-6e71-4f6e-a56d-1a1b9bab97e0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33a73225-2faf-4ab0-add3-e004817eecaf"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ce43f77-aac1-4701-96d3-eb260976020a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Recorder"",
            ""id"": ""a6a6e1af-76e0-4bcf-b6eb-c2dabf1ed856"",
            ""actions"": [
                {
                    ""name"": ""Record"",
                    ""type"": ""Button"",
                    ""id"": ""c5a8efb6-3a7b-4b9a-990f-ab46a01442dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""27a9e5e9-52a2-4bb0-8524-1f045c030d34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AdditiveRecord"",
                    ""type"": ""Button"",
                    ""id"": ""b71dce9f-71f1-4654-a8ff-6c2b27e8fd0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveRecordings"",
                    ""type"": ""Button"",
                    ""id"": ""327d29fb-66eb-4f67-9a07-ccec5a6c4572"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""c06b8bc0-bae6-49f6-9bd6-481ae0e3068a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelRecording"",
                    ""type"": ""Button"",
                    ""id"": ""9c48f399-e9de-44e7-9ea9-f47bf8f1ef7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fa01f56-f15b-4738-9fde-49545950b271"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Record"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fafbdd13-f077-466b-8c49-f48425b0b3dc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""580e3849-cf33-4231-9599-ed5729f73c83"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdditiveRecord"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3235856d-25e8-420a-9a8d-614ab190263d"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveRecordings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87b11789-b940-460f-901c-089275046626"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6443edf-5f47-40b4-9f2f-114dfd3848c8"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelRecording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Left = m_Movement.FindAction("Left", throwIfNotFound: true);
        m_Movement_Right = m_Movement.FindAction("Right", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Down = m_Movement.FindAction("Down", throwIfNotFound: true);
        // Recorder
        m_Recorder = asset.FindActionMap("Recorder", throwIfNotFound: true);
        m_Recorder_Record = m_Recorder.FindAction("Record", throwIfNotFound: true);
        m_Recorder_Play = m_Recorder.FindAction("Play", throwIfNotFound: true);
        m_Recorder_AdditiveRecord = m_Recorder.FindAction("AdditiveRecord", throwIfNotFound: true);
        m_Recorder_SaveRecordings = m_Recorder.FindAction("SaveRecordings", throwIfNotFound: true);
        m_Recorder_Stop = m_Recorder.FindAction("Stop", throwIfNotFound: true);
        m_Recorder_CancelRecording = m_Recorder.FindAction("CancelRecording", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Left;
    private readonly InputAction m_Movement_Right;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Down;
    public struct MovementActions
    {
        private @Controls m_Wrapper;
        public MovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_Movement_Left;
        public InputAction @Right => m_Wrapper.m_Movement_Right;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Down => m_Wrapper.m_Movement_Down;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Left.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Down.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnDown;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Recorder
    private readonly InputActionMap m_Recorder;
    private IRecorderActions m_RecorderActionsCallbackInterface;
    private readonly InputAction m_Recorder_Record;
    private readonly InputAction m_Recorder_Play;
    private readonly InputAction m_Recorder_AdditiveRecord;
    private readonly InputAction m_Recorder_SaveRecordings;
    private readonly InputAction m_Recorder_Stop;
    private readonly InputAction m_Recorder_CancelRecording;
    public struct RecorderActions
    {
        private @Controls m_Wrapper;
        public RecorderActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Record => m_Wrapper.m_Recorder_Record;
        public InputAction @Play => m_Wrapper.m_Recorder_Play;
        public InputAction @AdditiveRecord => m_Wrapper.m_Recorder_AdditiveRecord;
        public InputAction @SaveRecordings => m_Wrapper.m_Recorder_SaveRecordings;
        public InputAction @Stop => m_Wrapper.m_Recorder_Stop;
        public InputAction @CancelRecording => m_Wrapper.m_Recorder_CancelRecording;
        public InputActionMap Get() { return m_Wrapper.m_Recorder; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RecorderActions set) { return set.Get(); }
        public void SetCallbacks(IRecorderActions instance)
        {
            if (m_Wrapper.m_RecorderActionsCallbackInterface != null)
            {
                @Record.started -= m_Wrapper.m_RecorderActionsCallbackInterface.OnRecord;
                @Record.performed -= m_Wrapper.m_RecorderActionsCallbackInterface.OnRecord;
                @Record.canceled -= m_Wrapper.m_RecorderActionsCallbackInterface.OnRecord;
                @Play.started -= m_Wrapper.m_RecorderActionsCallbackInterface.OnPlay;
                @Play.performed -= m_Wrapper.m_RecorderActionsCallbackInterface.OnPlay;
                @Play.canceled -= m_Wrapper.m_RecorderActionsCallbackInterface.OnPlay;
                @AdditiveRecord.started -= m_Wrapper.m_RecorderActionsCallbackInterface.OnAdditiveRecord;
                @AdditiveRecord.performed -= m_Wrapper.m_RecorderActionsCallbackInterface.OnAdditiveRecord;
                @AdditiveRecord.canceled -= m_Wrapper.m_RecorderActionsCallbackInterface.OnAdditiveRecord;
                @SaveRecordings.started -= m_Wrapper.m_RecorderActionsCallbackInterface.OnSaveRecordings;
                @SaveRecordings.performed -= m_Wrapper.m_RecorderActionsCallbackInterface.OnSaveRecordings;
                @SaveRecordings.canceled -= m_Wrapper.m_RecorderActionsCallbackInterface.OnSaveRecordings;
                @Stop.started -= m_Wrapper.m_RecorderActionsCallbackInterface.OnStop;
                @Stop.performed -= m_Wrapper.m_RecorderActionsCallbackInterface.OnStop;
                @Stop.canceled -= m_Wrapper.m_RecorderActionsCallbackInterface.OnStop;
                @CancelRecording.started -= m_Wrapper.m_RecorderActionsCallbackInterface.OnCancelRecording;
                @CancelRecording.performed -= m_Wrapper.m_RecorderActionsCallbackInterface.OnCancelRecording;
                @CancelRecording.canceled -= m_Wrapper.m_RecorderActionsCallbackInterface.OnCancelRecording;
            }
            m_Wrapper.m_RecorderActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Record.started += instance.OnRecord;
                @Record.performed += instance.OnRecord;
                @Record.canceled += instance.OnRecord;
                @Play.started += instance.OnPlay;
                @Play.performed += instance.OnPlay;
                @Play.canceled += instance.OnPlay;
                @AdditiveRecord.started += instance.OnAdditiveRecord;
                @AdditiveRecord.performed += instance.OnAdditiveRecord;
                @AdditiveRecord.canceled += instance.OnAdditiveRecord;
                @SaveRecordings.started += instance.OnSaveRecordings;
                @SaveRecordings.performed += instance.OnSaveRecordings;
                @SaveRecordings.canceled += instance.OnSaveRecordings;
                @Stop.started += instance.OnStop;
                @Stop.performed += instance.OnStop;
                @Stop.canceled += instance.OnStop;
                @CancelRecording.started += instance.OnCancelRecording;
                @CancelRecording.performed += instance.OnCancelRecording;
                @CancelRecording.canceled += instance.OnCancelRecording;
            }
        }
    }
    public RecorderActions @Recorder => new RecorderActions(this);
    public interface IMovementActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface IRecorderActions
    {
        void OnRecord(InputAction.CallbackContext context);
        void OnPlay(InputAction.CallbackContext context);
        void OnAdditiveRecord(InputAction.CallbackContext context);
        void OnSaveRecordings(InputAction.CallbackContext context);
        void OnStop(InputAction.CallbackContext context);
        void OnCancelRecording(InputAction.CallbackContext context);
    }
}
